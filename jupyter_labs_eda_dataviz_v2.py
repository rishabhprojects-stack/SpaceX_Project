# -*- coding: utf-8 -*-
"""jupyter-labs-eda-dataviz-v2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w7l4-zojxh5BrzMK-RBjNI2iWrZYtj3Z

<p style="text-align:center">
    <a href="https://skills.network" target="_blank">
    <img src="https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/assets/logos/SN_web_lightmode.png" width="200" alt="Skills Network Logo">
    </a>
</p>

# **SpaceX  Falcon 9 First Stage Landing Prediction**


Falcon 9 first stage will land successfully

![](https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DS0701EN-SkillsNetwork/api/Images/landing_1.gif)

Several examples of an unsuccessful landing are shown here:

![](https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DS0701EN-SkillsNetwork/api/Images/crash.gif)

Most unsuccessful landings are planned. Space X performs a controlled landing in the oceans.

## Objectives
Perform exploratory Data Analysis and Feature Engineering using `Pandas` and `Matplotlib`

- Exploratory Data Analysis
- PreparingÂ Data  Feature Engineering

----


!pip install pandas
!pip install numpy
!pip install seaborn
!pip install matplotlib



# andas is a software library written for the Python programming language for data manipulation and analysis.
import pandas as pd
#NumPy is a library for the Python programming language, adding support for large, multi-dimensional arrays and matrices, along with a large collection of high-level mathematical functions to operate on these arrays
import numpy as np
# Matplotlib is a plotting library for python and pyplot gives us a MatLab like plotting framework. We will use this in our plotter function to plot data.
import matplotlib.pyplot as plt
#Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics
import seaborn as sns



df=pd.read_csv("https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/dataset_part_2.csv")


# df = pd.read_csv('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DS0701EN-SkillsNetwork/api/dataset_part_2.csv')

df.head(5)



sns.catplot(y="PayloadMass", x="FlightNumber", hue="Class", data=df, aspect = 5)
plt.xlabel("Flight Number",fontsize=20)
plt.ylabel("Pay load Mass (kg)",fontsize=20)
plt.show()



# Plot a scatter point chart with x axis to be Flight Number and y axis to be the launch site, and hue to be the class value
plt1 = sns.catplot(y="LaunchSite", x="FlightNumber", hue="Class", data=df, aspect = 5)
plt1.xlabel("Flight Number",fontsize=20)
plt1.ylabel("Launch Site",fontsize=20)
plt1.show()



# Plot a scatter point chart with x axis to be Pay Load Mass (kg) and y axis to be the launch site, and hue to be the class value
plt2 = sns.scatterplot(x="PayloadMass", y="LaunchSite", hue="Class", data=df)
plt2.set_xlabel("Pay load Mass (kg)")
plt2.set_ylabel("Launch Site")
plt2



# HINT use groupby method on Orbit column and get the mean of Class column
df_orbit = df.groupby(['Orbit'])['Class'].mean()
df_orbit
plt3 = sns.barplot(x=df_orbit.index, y=df_orbit.values)
plt3.set_xlabel("Orbit")
plt3.set_ylabel("Success Rate")



# Plot a scatter point chart with x axis to be FlightNumber and y axis to be the Orbit, and hue to be the class value
plt3 = sns.scatterplot(x='FlightNumber', y='Orbit', hue='Class', data=df)
plt3.xlabel="FlightNumber"
plt3.ylabel="Orbit"
plt3



# Plot a scatter point chart with x axis to be Payload and y axis to be the Orbit, and hue to be the class value
plt4 = sns.scatterplot(x='PayloadMass', y='Orbit', hue='Class', data=df)
plt4.xlabel="PayLoadMass"
plt4.ylabel="Orbit"
plt4



# A function to Extract years from the date
year=[]
def Extract_year(date):
    for i in df["Date"]:
        year.append(i.split("-")[0])
    return year

# Plot a line chart with x axis to be the extracted year and y axis to be the success rate
df["Date"] = pd.to_datetime(df["Date"])
df["Year"] = df["Date"].dt.year
df_year = df.groupby(['Year'])['Class'].mean()
plt5 = sns.lineplot(x=df_year.index, y=df_year.values)
plt5


features = df[['FlightNumber', 'PayloadMass', 'Orbit', 'LaunchSite', 'Flights', 'GridFins', 'Reused', 'Legs', 'LandingPad', 'Block', 'ReusedCount', 'Serial']]
features.head()



features_one_hot = pd.get_dummies(features, columns=['Orbit', 'LaunchSite', 'LandingPad', 'Serial'])
features_one_hot.head()


features_one_hot = features_one_hot.astype('float64')
features_one_hot.head()



features_one_hot.to_csv('dataset_part_3.csv', index=False)

